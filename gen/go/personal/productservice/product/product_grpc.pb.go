// product service

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/personal/productservice/product.proto

package product

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductService_Create_FullMethodName         = "/personal.productservice.product.ProductService/Create"
	ProductService_GetList_FullMethodName        = "/personal.productservice.product.ProductService/GetList"
	ProductService_Update_FullMethodName         = "/personal.productservice.product.ProductService/Update"
	ProductService_Delete_FullMethodName         = "/personal.productservice.product.ProductService/Delete"
	ProductService_CreateProducts_FullMethodName = "/personal.productservice.product.ProductService/CreateProducts"
	ProductService_GetListStream_FullMethodName  = "/personal.productservice.product.ProductService/GetListStream"
)

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// create new product
	Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error)
	// get list of product data
	GetList(ctx context.Context, in *ListProduct, opts ...grpc.CallOption) (*Response, error)
	// update product data
	Update(ctx context.Context, in *UpdateProduct, opts ...grpc.CallOption) (*Response, error)
	// delete product data
	Delete(ctx context.Context, in *DeleteProduct, opts ...grpc.CallOption) (*Response, error)
	// create new product streams
	CreateProducts(ctx context.Context, opts ...grpc.CallOption) (ProductService_CreateProductsClient, error)
	// get all products streams
	GetListStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProductService_GetListStreamClient, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) Create(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetList(ctx context.Context, in *ListProduct, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Update(ctx context.Context, in *UpdateProduct, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) Delete(ctx context.Context, in *DeleteProduct, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) CreateProducts(ctx context.Context, opts ...grpc.CallOption) (ProductService_CreateProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[0], ProductService_CreateProducts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceCreateProductsClient{stream}
	return x, nil
}

type ProductService_CreateProductsClient interface {
	Send(*Product) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type productServiceCreateProductsClient struct {
	grpc.ClientStream
}

func (x *productServiceCreateProductsClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productServiceCreateProductsClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productServiceClient) GetListStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ProductService_GetListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductService_ServiceDesc.Streams[1], ProductService_GetListStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productServiceGetListStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductService_GetListStreamClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productServiceGetListStreamClient struct {
	grpc.ClientStream
}

func (x *productServiceGetListStreamClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// create new product
	Create(context.Context, *Product) (*Response, error)
	// get list of product data
	GetList(context.Context, *ListProduct) (*Response, error)
	// update product data
	Update(context.Context, *UpdateProduct) (*Response, error)
	// delete product data
	Delete(context.Context, *DeleteProduct) (*Response, error)
	// create new product streams
	CreateProducts(ProductService_CreateProductsServer) error
	// get all products streams
	GetListStream(*empty.Empty, ProductService_GetListStreamServer) error
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) Create(context.Context, *Product) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProductServiceServer) GetList(context.Context, *ListProduct) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedProductServiceServer) Update(context.Context, *UpdateProduct) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProductServiceServer) Delete(context.Context, *DeleteProduct) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProductServiceServer) CreateProducts(ProductService_CreateProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateProducts not implemented")
}
func (UnimplementedProductServiceServer) GetListStream(*empty.Empty, ProductService_GetListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetListStream not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Create(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetList(ctx, req.(*ListProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Update(ctx, req.(*UpdateProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProduct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).Delete(ctx, req.(*DeleteProduct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_CreateProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductServiceServer).CreateProducts(&productServiceCreateProductsServer{stream})
}

type ProductService_CreateProductsServer interface {
	SendAndClose(*Response) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type productServiceCreateProductsServer struct {
	grpc.ServerStream
}

func (x *productServiceCreateProductsServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productServiceCreateProductsServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProductService_GetListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductServiceServer).GetListStream(m, &productServiceGetListStreamServer{stream})
}

type ProductService_GetListStreamServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productServiceGetListStreamServer struct {
	grpc.ServerStream
}

func (x *productServiceGetListStreamServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personal.productservice.product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProductService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ProductService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProductService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProductService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateProducts",
			Handler:       _ProductService_CreateProducts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetListStream",
			Handler:       _ProductService_GetListStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/personal/productservice/product.proto",
}
